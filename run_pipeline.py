import os
import subprocess
import sqlite3
from typing import List, Tuple

# ======== CONFIG ========
CRAWL_YEAR = int(os.getenv("CRAWL_YEAR", "2025"))
OUTPUT_DIR = "outputs"
PIPELINE_LIMIT = int(os.getenv("PIPELINE_LIMIT", "5"))

# ƒë∆∞·ªùng d·∫´n DB (tr√πng v·ªõi src/db.py)
DB_PATH = "data.db"

# ======== UTILS ========
def fetch_personal_links(year: int, limit: int) -> List[Tuple[str, str]]:
    """
    L·∫•y link 'personal' theo nƒÉm t·ª´ b·∫£ng links (m·ªõi nh·∫•t tr∆∞·ªõc).
    Tr·∫£ v·ªÅ list[(title, url)].
    """
    if not os.path.exists(DB_PATH):
        return []

    conn = sqlite3.connect(DB_PATH)
    try:
        cur = conn.cursor()
        cur.execute(
            """
            SELECT title, url
            FROM links
            WHERE year = ? AND bucket = 'personal'
            ORDER BY id DESC
            LIMIT ?
            """,
            (year, limit),
        )
        rows = cur.fetchall()
        return [(r[0], r[1]) for r in rows]
    finally:
        conn.close()

# ======== 1) RUN CRAWLER ========
print("üöÄ ƒêang crawl link m·ªõi b·∫±ng Playwright (ghi v√†o SQLite)‚Ä¶")
subprocess.run(["python", "src/crawl_links_and_classify.py"], check=False)

# ======== 2) L·∫§Y LINK 'C√Å NH√ÇN' NƒÇM 2025 T·ª™ DB ========
links = fetch_personal_links(CRAWL_YEAR, PIPELINE_LIMIT)
print(f"üîó S·∫Ω x·ª≠ l√Ω {len(links)} link 'C√° nh√¢n' (nƒÉm {CRAWL_YEAR})")

os.makedirs(OUTPUT_DIR, exist_ok=True)

# ======== 3) V√íNG L·∫∂P: DOWNLOAD ‚Üí OCR+PARSE+UPSERT DB ========
for idx, (title, url) in enumerate(links, 1):
    print(f"\nüü° [{idx}] {title}")
    try:
        # T·∫£i PDF
        print("‚¨áÔ∏è  ƒêang t·∫£i PDF‚Ä¶")
        subprocess.run(["python", "src/download_pdf.py", url], check=True)

        # Set ngu·ªìn ƒë·ªÉ extract_to_db ghi v√†o DB (source_url)
        env = os.environ.copy()
        env["CURRENT_SOURCE_URL"] = url

        # OCR + parse + upsert DB (d√πng Google Document AI trong extract_to_db.py)
        print("üß†  OCR & parse & ghi DB‚Ä¶")
        subprocess.run(["python", "src/extract_to_db.py"], check=True, env=env)

        # extract_to_db.py ƒë√£ t·ª± x√≥a PDF sau khi x·ª≠ l√Ω th√†nh c√¥ng.
        # N·∫øu b·∫°n mu·ªën d·ªçn k·ªπ: x√≥a m·ªçi file .pdf c√≤n l·∫°i (tr∆∞·ªùng h·ª£p l·ªói)
        leftover = [f for f in os.listdir(OUTPUT_DIR) if f.lower().endswith(".pdf")]
        for f in leftover:
            try:
                os.remove(os.path.join(OUTPUT_DIR, f))
            except Exception:
                pass

        print("‚úÖ Ho√†n t·∫•t 1 link.")

    except subprocess.CalledProcessError as e:
        print(f"‚ùå L·ªói khi x·ª≠ l√Ω: {e}")

print("\nüéâ Pipeline k·∫øt th√∫c.")
